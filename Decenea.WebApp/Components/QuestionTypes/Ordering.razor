@inherits QuestionBaseComponent

<MudGrid>
    @if (!ReadOnly)
    {
        <MudItem xs="12">
            <MudTextField T="string" Lines="6"
                          Style="width: 100%"
                          @bind-Value="OrderingQuestionModel.Question"
                          Variant="Variant.Outlined"
                          Label="Question"/>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudTextField @bind-Value="Choice" Label="Choice"
                          Variant="Variant.Outlined"
                          Style="height: 37px;"
                          Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Add"
                          OnAdornmentClick="AddChoice"/>
        </MudItem>
        <MudItem xs="12" sm="2">
            
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="async () => await CreateSample()">Sample</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="async () => await Reset()">Reset</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="async () => await Save()">Save</MudButton>
        </MudItem>
        foreach (var choice in OrderingQuestionModel.Choices)
        {
            <MudItem xs="12" sm="4" Style="text-align: end">
                <MudTextField @bind-Value="choice.Text"
                              Variant="Variant.Outlined"
                              Adornment="Adornment.End"
                              AdornmentIcon="@Icons.Material.Filled.Delete"
                              OnAdornmentClick="() => RemoveChoice(choice)"/>
            </MudItem>
        }
    }
    else
    {
        <MudItem>
            <MudField Variant="Variant.Outlined" Label="Question">
                @OrderingQuestionModel.Question
            </MudField>
        </MudItem>
    }
    <MudItem xs="6">
            <MudGrid>
                @foreach (var item in OrderingQuestionModel.Choices.OrderBy(i => i.Order))
                {
                    if (!item.Active)
                    {
                        <MudItem xs="12">
                            <div>
                                <MudFab Size="Size.Small" EndIcon="@Icons.Filled.ArrowForward" OnClick="@(() => OnClickRight(item.Text))"></MudFab>
                                @item.Text
                            </div>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudItem>
        <MudItem xs="6">
            <MudGrid>
                @foreach (var item in OrderingQuestionModel.Choices.OrderBy(i => i.Order))
                {
                    if (item.Active)
                    {
                        <MudItem xs="12">
                            <div>
                                <MudFab OnClick="@(() => OnClickLeft(item.Text))" Size="Size.Small" EndIcon="@Icons.Filled.ArrowBack"></MudFab>
                                @item.Text
                                @if (item.Order != OrderingQuestionModel.Choices.Where(i => !i.Active).Count())
                                {
                                    <MudFab OnClick="@(() => OnClickUp(item.Text))" Size="Size.Small" EndIcon="@Icons.Filled.ArrowUpward"></MudFab>
                                }
                                @if (item.Order != OrderingQuestionModel.Choices.Count - 1)
                                {
                                    <MudFab OnClick="@(() => OnClickDown(item.Text))" Size="Size.Small" EndIcon="@Icons.Filled.ArrowDownward"></MudFab>
                                }
                            </div>
                        </MudItem>
                    }
                }
            </MudGrid>
        </MudItem>
        </MudGrid>

@code {

}