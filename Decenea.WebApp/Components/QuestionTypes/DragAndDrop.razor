@using Decenea.WebApp.Models.QuestionTypes
@inherits QuestionBaseComponent
<MudGrid>
    @if (!ReadOnly)
    {
        <MudItem xs="12">
            <MudTextField T="string" Lines="6"
                          Style="width: 100%"
                          @bind-Value="DragAndDropQuestionModel.Question"
                          Variant="Variant.Outlined"
                          Label="Question"/>
        </MudItem>
        <MudItem xs="12" sm="2">
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="AddNewField">Add Choice</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2">
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="AddNewDropZone">Add Dropzone</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2">
            
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="async () => await CreateSample()">Sample</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="async () => await Reset()">Reset</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="async () => await Save()">Save</MudButton>
        </MudItem>
        <MudItem xs="6">
            <MudGrid>
                @foreach (var item in DragAndDropQuestionModel?.Choices ?? new List<DragAndDropQuestionModel.DropItem>())
                {
                    <MudItem xs="12">
                        <MudTextField
                            Value="item.Name"
                            T="string"
                            ValueChanged="async (s) => { item.Name = s; await ValueChanged(); }"
                            Variant="Variant.Outlined"
                            Label="@($"Choice No.{DragAndDropQuestionModel.Choices.IndexOf(item) + 1}")"
                            Adornment="@(!ReadOnly ? Adornment.End : Adornment.None)"
                            AdornmentIcon="@Icons.Material.Filled.Close"
                            OnAdornmentClick="() => RemoveItem(item)"/>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
        <MudItem xs="6">
            <MudGrid>
                @foreach (var item in DragAndDropQuestionModel.DropZones)
                {
                    <MudItem xs="12" sm="6">
                        <MudTextField
                            Value="item.Name"
                            T="string"
                            ValueChanged="async (s) => { item.Name = s; await ValueChanged(); }"
                            Variant="Variant.Outlined"
                            Label="@($"Choice No.{DragAndDropQuestionModel.DropZones.IndexOf(item) + 1}")"
                            Adornment="@(!ReadOnly || item.Identifier.Equals("0") ? Adornment.End : Adornment.None)"
                            AdornmentIcon="@Icons.Material.Filled.Close"
                            OnAdornmentClick="() => RemoveItem(item)"/>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudField Variant="Variant.Outlined" Label="Question">
                @DragAndDropQuestionModel.Question
            </MudField>
        </MudItem>
    }
    <MudItem xs="12">
        @if (Rerender)
        {
            <MudDropContainer T="DragAndDropQuestionModel.DropItem" Items="DragAndDropQuestionModel.Choices" ItemsSelector="@((item, dropzone) => item.Selector == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
                <ChildContent>
                    <MudGrid>
                        <MudItem xs="6">
                            <MudPaper Class="ma-4 flex-grow-1">
                                <MudList Clickable="true" Class="d-flex flex-column mud-height-full" Style="min-height: 100px;">
                                    <MudListSubheader>@DragAndDropQuestionModel.DropZones[0].Name</MudListSubheader>
                                    <MudDropZone T="DragAndDropQuestionModel.DropItem" Identifier="@($"{DragAndDropQuestionModel.DropZones[0].Identifier}")" Class="flex-grow-1"/>
                                </MudList>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6">
                            <MudGrid>
                                @{
                                    if (DragAndDropQuestionModel.DropZones.Any())
                                        foreach (var itm in DragAndDropQuestionModel.DropZones)
                                        {
                                            if (itm.Identifier != "0")
                                            {
                                                <MudItem xs="12">
                                                    <MudPaper Class="ma-4 flex-grow-1">
                                                        <MudList Clickable="true" Class="d-flex flex-column mud-height-full" Style="min-height: 100px;">
                                                            <MudListSubheader>@itm.Name</MudListSubheader>
                                                            <MudDropZone T="DragAndDropQuestionModel.DropItem" Identifier="@(itm.Identifier)" Class="flex-grow-1"/>
                                                        </MudList>
                                                    </MudPaper>
                                                </MudItem>
                                            }
                                        }
                                }
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </ChildContent>
                <ItemRenderer>
                    <MudListItem Text="@context.Name"/>
                </ItemRenderer>
            </MudDropContainer>
        }
    </MudItem>
</MudGrid>

@code {

}

