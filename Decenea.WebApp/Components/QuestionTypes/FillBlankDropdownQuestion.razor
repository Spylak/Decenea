@using Decenea.WebApp.Models.QuestionTypes
@inherits QuestionBaseComponent
<MudGrid>
    @if (EditMode)
    {
        <MudItem xs="12">
            <MudText>You need to add @SpecialChars to create a blank space option.</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudTextField T="string"
                          Lines="6"
                          Style="width: 100%"
                          Value="FillBlankDropdownQuestionModel.Description"
                          ValueChanged="(val) => UpdateOptions(val)"
                          Variant="Variant.Outlined"
                          Label="Question"/>
        </MudItem>
        <MudItem xs="12" sm="4">
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="AddNewField">Add Space Option</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2">

        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="async () => await CreateSample()">Sample</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="Reset">Reset</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="async () => await Save(GenericQuestionModel.ConvertToNonGenericModel(FillBlankDropdownQuestionModel))">Save</MudButton>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudField Variant="Variant.Outlined" Label="Question">
                @DynamicQuestion
            </MudField>
        </MudItem>
    }
    @foreach (var item in Fields)
    {
        <MudItem xs="12" sm="4">
            <MudStack Spacing="1">
                @if (EditMode)
                {
                    <MudButton FullWidth="true"
                               Color="@(Fields.IndexOf(item) >= QuestionText.Count() - 1 ? Color.Error : Color.Warning)"
                               Variant="Variant.Filled"
                               OnClick="() => RemoveField(item)">
                        Remove Field
                    </MudButton>

                    <MudTextField T="string"
                                  @bind-Value="item.Input"
                                  Style="width: 100%"
                                  Label="Add Space Option"
                                  Variant="Variant.Outlined"
                                  Adornment="Adornment.End"
                                  AdornmentIcon="@Icons.Material.Filled.Add"
                                  AdornmentColor="Color.Success"
                                  OnAdornmentClick="() => AddOption(item, item.Input)"/>
                }
                <MudSelect T="string"
                           Value="@(item.Option.Choices.FirstOrDefault(i => i.Checked) is null ? "Choose one" : item.Option.Choices.FirstOrDefault(i => i.Checked)?.Text)"
                           Label="@($"Space No.{Fields.IndexOf(item) + 1}")"
                           Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter"
                           ValueChanged="@(e => OnValueChange(e, item.Option.SpaceNo))">
                    @foreach (var itm in item.Option.Choices)
                    {
                        <MudSelectItem T="string" Value="@(itm.Text)"/>
                    }
                </MudSelect>
            </MudStack>
        </MudItem>
    }
</MudGrid>