@using Decenea.WebApp.Models.QuestionTypes

<MudPaper Class="ma-2" Outlined="true" Square="true" Style="@Style">
    <MudGrid>
        @if (!PresentationOnly)
        {
            <MudItem xs="12" sm="6">
                <MudSelect T="string" Value="VisibleQuestionType"
                           ValueChanged="@(choice => ChangeType(choice))"
                           Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter">
                    @foreach (var itm in typeof(QuestionTypeValues).GetFields())
                    {
                        <MudSelectItem T="string" Value="@(itm.Name)"></MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4" sm="4">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => PreviewMode = !PreviewMode">@(PreviewMode ? "Edit" : "Preview")</MudButton>
                @* <MudButton OnClick="async () => { await GlobalFunctionService.ConsoleLog(TestContainer.Test); }">Log item</MudButton> *@
            </MudItem>
        }
        <MudItem xs="12">
            @if (VisibleQuestionType == QuestionTypeValues.FillBlank)
            {
                <FillBlankQuestion @bind-FillBlankQuestionModel="FillBlankModel"
                           SaveCallback="SaveQuestionToTest"
                           ReadOnly="@(PresentationOnly || PreviewMode)">
                </FillBlankQuestion>
            }
            else if (VisibleQuestionType == QuestionTypeValues.FillBlankDropdown)
            {
                <FillBlankDropdownQuestion @bind-FillBlankDropdownQuestionModel="FillBlankDropdownModel"
                                   SaveCallback="SaveQuestionToTest"
                                   ReadOnly="@(PresentationOnly || PreviewMode)">
                </FillBlankDropdownQuestion>
            }
            else if (VisibleQuestionType == QuestionTypeValues.DragAndDrop)
            {
                <DragAndDropQuestion ReadOnly="@(PresentationOnly || PreviewMode)"
                             SaveCallback="SaveQuestionToTest"
                             @bind-DragAndDropQuestionModel="DragAndDropModel">
                </DragAndDropQuestion>
            }
            else if (VisibleQuestionType == QuestionTypeValues.Dropdown)
            {
                <DropdownQuestion ReadOnly="@(PresentationOnly || PreviewMode)"
                          SaveCallback="SaveQuestionToTest"
                          @bind-DropdownQuestionModel="DropdownModel">
                </DropdownQuestion>
            }
            else if (VisibleQuestionType == QuestionTypeValues.MultipleChoice)
            {
                <MultipleChoiceQuestion ReadOnly="@(PresentationOnly || PreviewMode)"
                                SaveCallback="SaveQuestionToTest"
                                @bind-MultipleChoiceQuestionModel="MultipleChoiceModel">
                </MultipleChoiceQuestion>
            }
            else if (VisibleQuestionType == QuestionTypeValues.MultipleYesOrNo)
            {
                <MultipleYesOrNoQuestion ReadOnly="@(PresentationOnly || PreviewMode)"
                                 SaveCallback="SaveQuestionToTest"
                                 @bind-MultipleYesOrNoQuestionModel="MultipleYesOrNoModel">
                </MultipleYesOrNoQuestion>
            }
            else if (VisibleQuestionType == QuestionTypeValues.Ordering)
            {
                <OrderingQuestion ReadOnly="@(PresentationOnly || PreviewMode)"
                          SaveCallback="SaveQuestionToTest"
                          @bind-OrderingQuestionModel="OrderingModel">
                </OrderingQuestion>
            }
            else if (VisibleQuestionType == QuestionTypeValues.MultipleChoiceSingle)
            {
                <MultipleChoiceSingleQuestion ReadOnly="@(PresentationOnly || PreviewMode)"
                                      SaveCallback="SaveQuestionToTest"
                                      @bind-MultipleChoiceSingleQuestionModel="MultipleChoiceSingleModel">
                </MultipleChoiceSingleQuestion>
            }
            else if (VisibleQuestionType == QuestionTypeValues.OrderingDragAndDrop)
            {
                <OrderingDnDQuestion ReadOnly="@(PresentationOnly || PreviewMode)"
                             SaveCallback="SaveQuestionToTest"
                             @bind-OrderingDnDQuestionModel="OrderingDragAndDropModel">
                </OrderingDnDQuestion>
            }
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
}