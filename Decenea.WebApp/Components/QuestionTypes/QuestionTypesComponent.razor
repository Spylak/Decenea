@using Decenea.WebApp.Models.QuestionTypes
@using System.Reflection

<MudPaper Class="ma-2" Elevation="0" Square="true" Style="@Style">
    <MudGrid>
        @if (!PresentationOnly)
        {
            <MudItem xs="12" sm="6">
                <MudSelect T="string"
                           Value="VisibleQuestionType"
                           ValueChanged="@(choice => ChangeType(choice))"
                           Variant="Variant.Outlined"
                           AnchorOrigin="Origin.BottomCenter">
                    @foreach (var itm in typeof(QuestionType).GetFields(BindingFlags.Public | BindingFlags.Static)
                                  .Select(field => field.Name)
                                  .ToArray())
                    {
                        <MudSelectItem Value="@(itm)"></MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="4" sm="4">
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => EditMode = !EditMode)">@(!EditMode ? "Edit" : "Preview")</MudButton>
                @* <MudButton OnClick="async () => { await GlobalFunctionService.ConsoleLog(TestContainer.Test); }">Log item</MudButton> *@
            </MudItem>
        }
        <MudItem xs="12">
            @if (VisibleQuestionType == nameof(QuestionType.FillBlank))
            {
                <FillBlankQuestion FillBlankQuestionBaseModel="Question"
                                   FillBlankQuestionBaseModelChanged="async (question) => await UpdateQuestion(question)"
                                   SaveCallback="SaveQuestionToTest"
                                   EditMode="@(!PresentationOnly && !EditMode)">
                </FillBlankQuestion>
            }
            else if (VisibleQuestionType == nameof(QuestionType.FillBlankDropdown))
            {
                <FillBlankDropdownQuestion FillBlankDropdownQuestionBaseModel="Question"
                                           FillBlankDropdownQuestionBaseModelChanged="async (question) => await UpdateQuestion(question)"
                                           SaveCallback="SaveQuestionToTest"
                                           EditMode="@(!PresentationOnly && !EditMode)">
                </FillBlankDropdownQuestion>
            }
            else if (VisibleQuestionType == nameof(QuestionType.DragAndDrop))
            {
                <DragAndDropQuestion EditMode="@(!PresentationOnly && !EditMode)"
                                     SaveCallback="SaveQuestionToTest"
                                     DragAndDropQuestionBaseModel="Question"
                                     DragAndDropQuestionBaseModelChanged="async (question) => await UpdateQuestion(question)">
                </DragAndDropQuestion>
            }
            else if (VisibleQuestionType == nameof(QuestionType.Dropdown))
            {
                <DropdownQuestion EditMode="@(!PresentationOnly && !EditMode)"
                                  SaveCallback="SaveQuestionToTest"
                                  DropdownQuestionBaseModel="Question"
                                  DropdownQuestionBaseModelChanged="async (question) => await UpdateQuestion(question)">
                </DropdownQuestion>
            }
            else if (VisibleQuestionType == nameof(QuestionType.MultipleChoice))
            {
                <MultipleChoiceQuestion EditMode="@(!PresentationOnly && !EditMode)"
                                        SaveCallback="SaveQuestionToTest"
                                        MultipleChoiceQuestionBaseModel="Question"
                                        MultipleChoiceQuestionBaseModelChanged="async (question) => await UpdateQuestion(question)">
                </MultipleChoiceQuestion>
            }
            else if (VisibleQuestionType == nameof(QuestionType.MultipleYesOrNo))
            {
                <MultipleYesOrNoQuestion EditMode="@(!PresentationOnly && !EditMode)"
                                         SaveCallback="SaveQuestionToTest"
                                         MultipleYesOrNoQuestionBaseModel="Question"
                                         MultipleYesOrNoQuestionBaseModelChanged="async (question) => await UpdateQuestion(question)">
                </MultipleYesOrNoQuestion>
            }
            else if (VisibleQuestionType == nameof(QuestionType.Ordering))
            {
                <OrderingQuestion EditMode="@(!PresentationOnly && !EditMode)"
                                  SaveCallback="SaveQuestionToTest"
                                  OrderingQuestionBaseModel="Question"
                                  OrderingQuestionBaseModelChanged="async (question) => await UpdateQuestion(question)">
                </OrderingQuestion>
            }
            else if (VisibleQuestionType == nameof(QuestionType.MultipleChoiceSingle))
            {
                <MultipleChoiceSingleQuestion EditMode="@(!PresentationOnly && !EditMode)"
                                              SaveCallback="SaveQuestionToTest"
                                              MultipleChoiceSingleQuestionBaseModel="Question"
                                              MultipleChoiceSingleQuestionBaseModelChanged="async (question) => await UpdateQuestion(question)">
                </MultipleChoiceSingleQuestion>
            }
            else if (VisibleQuestionType == nameof(QuestionType.OrderingDragAndDrop))
            {
                <OrderingDnDQuestion EditMode="@(!PresentationOnly && !EditMode)"
                                     SaveCallback="SaveQuestionToTest"
                                     OrderingDnDQuestionBaseModel="Question"
                                     OrderingDnDQuestionBaseModelChanged="async (question) => await UpdateQuestion(question)">
                </OrderingDnDQuestion>
            }
        </MudItem>
    </MudGrid>
</MudPaper>

@code {
}