@using Decenea.WebApp.Models.QuestionTypes
@inherits QuestionBaseComponent
<MudGrid>
    @if (EditMode)
    {
        <MudItem xs="12">
            <MudTextField T="string" Lines="6"
                          Style="width: 100%"
                          Value="DragAndDropQuestionModel.Description"
                          ValueChanged="@(s => DescriptionChanged(s))"
                          Variant="Variant.Outlined"
                          Label="Question"/>
        </MudItem>
        <MudItem xs="12" sm="2">
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="AddNewField">Add Choice</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2">
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="AddNewDropZone">Add Dropzone</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2">

        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="async () => await CreateSample()">Sample</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="async () => await Reset()">Reset</MudButton>
        </MudItem>
        <MudItem xs="12" sm="2" Style="text-align: end">
            <MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="async () => await Save(GenericQuestionModel.ConvertToNonGenericModel(DragAndDropQuestionModel))">Save</MudButton>
        </MudItem>
        <MudItem xs="6">
            <MudGrid>
                @foreach (var item in DragAndDropQuestionModel.QuestionContent.Choices)
                {
                    <MudItem xs="12">
                        <MudTextField
                            Value="item.Name"
                            T="string"
                            ValueChanged="async (s) => { item.Name = s; await ValueChanged(); }"
                            Variant="Variant.Outlined"
                            Label="@($"Choice No.{DragAndDropQuestionModel.QuestionContent.Choices.IndexOf(item) + 1}")"
                            Adornment="@(EditMode ? Adornment.End : Adornment.None)"
                            AdornmentIcon="@Icons.Material.Filled.Close"
                            OnAdornmentClick="() => RemoveItem(item)"/>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
        <MudItem xs="6">
            <MudGrid>
                @foreach (var item in DragAndDropQuestionModel.QuestionContent.DropZones)
                {
                    <MudItem xs="12" sm="6">
                        <MudTextField
                            Value="item.Value"
                            T="string"
                            ValueChanged="@(async s => { await DragAndDropQuestionModelQuestionContentDropZonesChnaged(item.Key, s); })"
                            Variant="Variant.Outlined"
                            Label="@($"DropZone No.{item.Key + 1}")"
                            Adornment="@(!EditMode || item.Key.Equals(0) ? Adornment.None : Adornment.End)"
                            AdornmentIcon="@Icons.Material.Filled.Close"
                            OnAdornmentClick="() => RemoveItem(item.Key)"/>
                    </MudItem>
                }
            </MudGrid>
        </MudItem>
    }
    else
    {
        <MudItem xs="12">
            <MudField Variant="Variant.Outlined" Label="Question">
                @DragAndDropQuestionModel.Description
            </MudField>
        </MudItem>
    }
    <MudItem xs="12">
        @if (Rerender)
        {
            <MudDropContainer T="DragAndDrop.DropItem"
                              Items="@(DragAndDropQuestionModel.QuestionContent.Choices)"
                              ItemsSelector="@((item, dropzone) => item.Selector == dropzone)"
                              ItemDropped="ItemUpdated"
                              Class="d-flex flex-wrap flex-grow-1">
                <ChildContent>
                    @if (DragAndDropQuestionModel.QuestionContent.DropZones.Any())
                    {
                        <MudGrid>
                            <MudItem xs="6">
                                <MudPaper Class="ma-4 flex-grow-1">
                                    <MudList T="string" Clickable="true" Class="d-flex flex-column mud-height-full" Style="min-height: 100px;">
                                        <MudListSubheader>@DragAndDropQuestionModel.QuestionContent.DropZones[0]</MudListSubheader>
                                        <MudDropZone T="DragAndDrop.DropItem" Identifier="@("0")" Class="flex-grow-1"/>
                                    </MudList>
                                </MudPaper>
                            </MudItem>
                            <MudItem xs="6">
                                <MudGrid>
                                    @foreach (var itm in DragAndDropQuestionModel.QuestionContent.DropZones.Where(i => i.Key != 0))
                                    {
                                        <MudItem xs="12">
                                            <MudPaper Class="ma-4 flex-grow-1">
                                                <MudList T="string" Clickable="true" Class="d-flex flex-column mud-height-full" Style="min-height: 100px;">
                                                    <MudListSubheader>@itm.Value</MudListSubheader>
                                                    <MudDropZone T="DragAndDrop.DropItem" Identifier="@(itm.Key.ToString())" Class="flex-grow-1"/>
                                                </MudList>
                                            </MudPaper>
                                        </MudItem>
                                    }
                                </MudGrid>
                            </MudItem>
                        </MudGrid>
                    }
                </ChildContent>
                <ItemRenderer>
                    <MudListItem T="string" Text="@context.Name"/>
                </ItemRenderer>
            </MudDropContainer>
        }
    </MudItem>
</MudGrid>

@code {

}