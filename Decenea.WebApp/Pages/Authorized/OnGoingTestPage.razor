@attribute [Route($"/{Routes.OnGoingTest}/{{testId}}")]
@attribute [Authorize]

<PageTitle>OnGoingTestPage</PageTitle>

<MudGrid Spacing="0">
    @if (TestContainer.OngoingTest?.StartingTime > DateTime.Now)
    {
        <h4>The test is starting in @((TestContainer.OngoingTest.StartingTime.Value - DateTime.Now).ToString("mm:ss")))</h4>
        <h4>Or you can start now</h4>
        <MudButton Size="Size.Medium" Color="Color.Primary" Variant="Variant.Filled" OnClick="@StartTest">Start Test!</MudButton>
    }
    else if (TestContainer.OngoingTest?.StartingTime == DateTime.MinValue)
    {
        <MudItem Style="justify-content: center;display: flex;align-items: center;margin-top: 25vh" xs="12">
            <MudButton Size="Size.Medium" Color="Color.Primary" Variant="Variant.Filled" OnClick="@StartTest">Start Test!</MudButton>
        </MudItem>
    }
    else
    {
        @* <MudItem xs="12"> *@
        @*     <Countdown TotalTimeInSeconds="@((int)((TestContainer.OngoingTest?.FinishTime - DateTime.Now)?.TotalSeconds??0))" *@
        @*                Finished="b => Console.WriteLine(b)" *@
        @*                ></Countdown> *@
        @* </MudItem> *@
        if (TestContainer.OngoingTest?.GenericQuestionModels.Any() ?? false)
        {
            <MudItem xs="12" Style="display: flex;">
                @if (ActiveQuestionIndex > 0)
                {
                    <MudButton Size="Size.Medium" OnClick="PreviousQuestion">Previous</MudButton>
                }
                <MudSpacer/>
                @if (ActiveQuestionIndex < TestContainer.OngoingTest.GenericQuestionModels.Count - 1)
                {
                    <MudButton Size="Size.Medium" OnClick="NextQuestion">Next</MudButton>
                }
                else
                {
                    <MudButton Size="Size.Medium" Color="Color.Info" OnClick="@(async () => await MudDialog.ShowAsync())">Finish</MudButton>
                }
            </MudItem>
            <MudItem xs="12" Style="height: 90%">
                <QuestionTypesComponent TestModel="TestContainer.OngoingTest"
                                        PresentationOnly="true"
                                        Question="@_genericQuestionModels[ActiveQuestionIndex]"
                                        QuestionChanged="async question => { _genericQuestionModels[ActiveQuestionIndex] = question; await UpdateTestToIdb(); }"/>
            </MudItem>
        }
    }
</MudGrid>

<MudDialog @ref="MudDialog">
    <TitleContent>
        Submit Test
    </TitleContent>
    <DialogContent>
        Are you sure you want to submit your answers?
    </DialogContent>
    <DialogActions>
        <MudButton Size="Size.Medium" Color="Color.Warning" OnClick="async () => await MudDialog.CloseAsync()">Cancel</MudButton>
        <MudSpacer/>
        <MudButton Size="Size.Medium" Color="Color.Success" OnClick="@(async () => await Submit())">Submit</MudButton>
    </DialogActions>
</MudDialog>